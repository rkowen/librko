
              This software is copyrighted by R.K.Owen,Ph.D. 1993

          The author, R.K.Owen, of this software is not liable for any
          problems WHATSOEVER which may result from use  or  abuse  of
          this  software.

          The author, R.K.Owen, licenses this software under the
          GNU LESSER GENERAL PUBLIC LICENSE
          which can be found at http://www.gnu.org

          Anyone  who  includes this software in a commercial package,
          or intends  to,  must  contact  the  author,  R.K.Owen,  and
          license this software.

          last known email: rk@owen.sj.ca.us
                            rkowen@nersc.gov

          If you use this software just send me some email so  I  know
          who you are and can send update information.  If you can put
          "metropolis" in the subject line it would help also.  Thanks.


     NAME
	  metropolis - Nicholas	Metropolis algorithm for combinatorial
	  optimization

     DESCRIPTION
	  metropolis() implements the Nicholas Metropolis algorithm,
	  which	simply stated:	``Propose a move and either accept or
	  reject it.''	This method is sometimes called	``simulated
	  annealing'' and is ideal for doing combinatorial
	  optimization,	or the optimization of a discrete ordering of
	  objects.  An example of this is the traveling	salesman
	  problem where	a salesman has N cities	to visit and the goal
	  is to	``minimize'' the cost or distance traveled.  The
	  number of paths that can be taken is N! and for finding the
	  optimum route	becomes	prohibitively expensive	for larger N.
	  The Metropolis algorithm starts with any route and
	  rearranges the route until it	settles	into a minimum.	 It's
	  not guaranteed to be the global minimum, but it will provide
	  a good overall solution without breaking the computational
	  bank.

	  The metropolis() function will rearrange the entries in an
	  index	array and needs	no other detailed information
	  concerning the data, since ``communication'' with the	data
	  is all done through user supplied functions.	The resultant
	  index	array will contain an optimized	sequence of indices as
	  determined by	the user ``cost'' or ``energy''	function which
	  metropolis() is trying to minimize.

	  PRECISION is typedef'd to double as default if _PRECISION_
	  is undefined.	 However, if another type is to	be used, then
	  a macro exp()	may need to be defined.	 See the source	code
	  and header files for further documentation regarding this.

