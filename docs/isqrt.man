.\" RCSID @(#)$Id: isqrt.man,v 1.4 2002/02/08 23:10:22 rk Exp $
.\" LIBDIR
.TH "ISQRT" "3rko" "26 Nov 1998"
.SH NAME
isqrt \- integer sqrt
.SH SYNOPSIS

.nf
#include "isqrt.h"

         char  chsqrt(char n);
  signed char  scsqrt(signed char n);
unsigned char  ucsqrt(unsigned char n);
         short  hsqrt(short n);
unsigned short uhsqrt(unsigned short n);
         int    isqrt(int n);
unsigned int   uisqrt(unsigned int n);
         long   lsqrt(long n);
unsigned long  ulsqrt(unsigned long n);
.fi

.SH DESCRIPTION
The
.I isqrt
collection returns the nearest lower integer square root for the given
integer argument.  It uses a method similar and augmenting the one
described by Arne Steinarson (arst@ludd.luth.se).
(see http://www.aha.ru/~pervago/articles/sqroot.txt or
http://www.df.lth.se/~john_e/gems/gem0034.html)
.P
It finds the lowest even power of two (2^(2n)) that contains the argument,
shifting the argument to the right by 2*n bits (which corresponds to
division by 2^(2n)).  This leaves a value between [0,1), which is
used to search a lookup table (LUT).  The table is accurate to 8 bits.
Once the value is found in the LUT, the value is left shifted by n bits,
which corresponds to multiplication by 2^n.
Finally, the Newton method to quadratically converge to a more accurate
value.
.P
Here's roughly an example of what's going on.  Take the isqrt(10000).
10000 = 0x2710, which is less than 2^14 but greater 2^12.  Hence shift
the value 14 bits to the right which yields .610352.  The square root
is computed (.78125) which is then shifted to the left by 7 bits, which
results in 100, as expected!
Of course, we use a LUT, which only gets the value approximately right.
The exact value is generated by using the Newton method, which quadratically
converges the zeros of functions by using the current value and slope
generated from the function.
.P
This method is extremely fast and involves no conversion to any
floating point representations and std-C math libraries.
The code makes no assumptions about
the length of any of the larger integer types except that they are
larger than an unsigned char.
However, the code can be made even faster by using a binary search to
determine 2^(2*n) if the length of the integer type is known.

.SH SEE ALSO
sqrt(3),gcd(3rko)

.SH DIAGNOSTICS
Returns 0 for invalid input values.

.SH AUTHOR
R.K.Owen,Ph.D.

.KEY WORDS
