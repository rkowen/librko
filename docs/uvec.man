.\" RCSID @(#)$Id: uvec.man,v 1.13 2002/10/03 17:46:55 rk Exp $
.\" LIBDIR
.TH "UVEC" "3rko" "31 Oct 1997"
.SH NAME
uvec \- Unix vector, a (char *)NULL terminated vector of character
strings.

.SH SYNOPSIS

.nf

enum uvec_order {UVEC_ASCEND, UVEC_DESCEND
#ifdef HAVE_STRCASECMP
	, UVEC_CASE_ASCEND, UVEC_CASE_DESCEND
#endif
	};

enum uvec_def_str_fns {UVEC_DEFAULT, UVEC_USER, UVEC_STDC
#ifdef HAVE_STRMALLOC
	, UVEC_STRMALLOC
#endif
	};

/* Unix Vector package string functions */

typedef struct {
	/* store the string function type - user can ignore this */
	enum uvec_def_str_fns type;
	/* allocate a string of n+1 chars and put str in it */
	char	*(*str_alloc)(char const *str, size_t n);
	/* free up the string storage */
	int	 (*str_free)(char **str);
} uvec_str;

/* Unix Vector package */

typedef struct {
	char	  tag[5];		/* name tag for this type */
	char	**vector;		/* vector of strings */
	int	  number;		/* current number of list */
	int	  capacity;		/* the possible capacity of vector */
	uvec_str  str_fns;		/* which string functions to use */
} uvec;

#include "uvec.h"

int       uvec_set_def_strfns(enum uvec_def_str_fns type, uvec_str *strfns);
uvec_str *uvec_get_def_strfns(void);
int       uvec_set_strfns(uvec *uv, uvec_str *strfns);
uvec_str *uvec_get_strfns(uvec *uv);

uvec  *uvec_ctor_(int cap, uvec_str strfns);
uvec  *uvec_ctor(int cap);
int    uvec_dtor(uvec **uv);
uvec  *uvec_alloc_(uvec_str strfns);
uvec  *uvec_alloc(void);
int    uvec_dealloc(uvec **uv);
int    uvec_init_(uvec *uv, int cap, uvec_str strfns);
int    uvec_init(uvec *uv, int cap);
int    uvec_close(uvec *uv);

int    uvec_exists(uvec const *uv);
int    uvec_capacity(uvec const *uv);
int    uvec_number(uvec const *uv);
int    uvec_end(uvec const *uv);
char **uvec_vector(uvec const *uv);

int    uvec_ninsert(uvec *uv, char const *str, size_t n, int place);
int    uvec_insert(uvec *uv, char const *str, int place);
int    uvec_delete(uvec *uv, int place);
int    uvec_nadd(uvec *uv, char const *str, size_t n);
int    uvec_add(uvec *uv, char const *str);
int    uvec_addl(uvec *uv, ...);
int    uvec_push(uvec *uv, char const *str);
int    uvec_pop(uvec *uv);
int    uvec_unshift(uvec *uv, char const *str);
int    uvec_shift(uvec *uv);

int    uvec_count_tok(char const *token, char const *string);
int    uvec_copy_str(uvec *u, char const *token, char const *string);
int    uvec_copy_vec(uvec *u, char const * const *vec, int number);
int    uvec_copy(uvec *u, uvec const *v);
int    uvec_sort(uvec *uv, enum uvec_order type);
int    uvec_qsort(uvec *uv, int (cmp)(void const *a, void const *b));
int    uvec_find(uvec *uv, char const *str, enum uvec_order type);
int    uvec_uniq(uvec *uv, enum uvec_order type);
int    uvec_reverse(uvec const *uv);
int    uvec_randomize(uvec const *uv, int seed);
uvec  *str2uvec(char const *token, char const *string);
uvec  *vec2uvec(char const * const *vec, int num);
uvec  *uvec2uvec(uvec const *uv);
char  *uvec2str(uvec const *uv, char const *token);
int    uvec_strfree(uvec const *uv, char **str);

.fi

.SH DESCRIPTION
.I uvec
could have easily been made a C++ class, but is
confined to C so that it can be used to interact with the
exec() group of POSIX function calls for basic C programs.
Hence, for maximum object-oriented programming confine
all references to the list of functions given and pay no
attention to the members of the structure at all.
.P
A Unix vector is a list of char strings, terminated by a
(char *) NULL entry.  An example of this is char **argv
and char **environ.
.P
All the functions,
except for the accessor and constructor functions,
return 0 if no error or return <0 otherwise.

.TP 15
.I uvec_set_def_strfns
register the set of string functions to use by default.
If using a prepackaged set, then set
.I type
to the given enum, and set
.I strfns
to NULL.
.TP
.I uvec_get_def_strfns
return which set of string functions are being used,
returns a uvec_str struct.
.TP
.I uvec_set_strfns
reset the string functions for an allocated uvec object.
Should only be done immediately after a uvec_alloc, and not when
the object contains a vector.  This will screw things up if a different
set of string functions are used.
.TP
.I uvec_get_strfns
return which set of string functions are being used by the uvec object,
returns a uvec_str struct.
.TP
.I uvec_ctor_
construct Unix vector to capacity ``cap''
using the given set of string functions.

.TP
.I uvec_ctor
construct Unix vector to capacity ``cap''
using the default set of string functions.

.TP
.I uvec_dtor
destroy the Unix vector and it's contents.

.TP
.I uvec_alloc_
allocate the uninitialized uvec object (no vector is allocated)
using the given set of string functions.  Will need to do an
.I uvec_init*
afterwards.

.TP
.I uvec_alloc
allocate the uninitialized uvec object (no vector is allocated)
using the default set of string functions.  Will need to do an
.I uvec_init*
afterwards.

.TP
.I uvec_dealloc
Deallocate the uvec object (vector is not touched)

.TP
.I uvec_init_
initialize Unix vector to capacity ``cap''
using the given set of string functions.

.TP
.I uvec_init
initialize Unix vector to capacity ``cap''
using the default set of string functions.

.TP
.I uvec_close
destroy the Unix vector contents only.
.TP
.I uvec_exists
returns 0 if the vector is not constructed, else non-0.
.TP
.I uvec_capacity
returns the maximum capacity of the vector, otherwise returns -1
if the vector is not defined or there are no elements to the vector.
.TP
.I uvec_number
returns the current number of entries (must always be less than
the capacity, otherwise returns -1 if the vector is not defined.
.TP
.I uvec_end
returns (number - 1), this is the last element in the vector,
otherwise returns -1 if the vector is not defined.
.TP
.I uvec_vector
returns the
.I char **
vector, otherwise returns
.I (char **) NULL
if the vector is not defined.
.TP
.I uvec_insert
insert an element before element ``place''.
.TP
.I uvec_ninsert
insert an element of size n before element ``place''.
.TP
.I uvec_delete
delete an element at element ``place''.
.TP
.I uvec_add
add one element to end of vector.
.TP
.I uvec_nadd
add one element of size n to end of vector.
.TP
.I uvec_addl
add a NULL terminated list of elements to end of vector.
.TP
.I uvec_push
same as
.I uvec_add
.TP
.I uvec_pop
pop off one element at end of vector.
.TP
.I uvec_unshift
add one element to start of vector.
.TP
.I uvec_shift
shift one element from start of vector.
.TP
.I uvec_count_tok
a utility function that returns the number of token delimited elements
in a string (trailing following token is optional).  Tokens escaped
with a '\' are not counted.
.TP
.I uvec_copy_str
create a uvec from a token delimited string.
Tokens escaped with a '\' are not counted.
.TP
.I uvec_copy_vec
copy an existing char vector to an unitialized uvec.
Set num to a value less than or equal to 0 to grab the entire vector.
.TP
.I uvec_copy
copy one uvec to another unitialized one.
.TP
.I uvec_sort
sort the vector, given the following types:
UVEC_ASCEND, UVEC_DESCEND, UVEC_CASE_ASCEND, UVEC_CASE_DESCEND,
where the last two are only available if the
.TP
.I uvec_qsort
sort the vector, according to the passed comparison function,
which is of the same type as needed by
.I qsort()
namely
.I int cmp(void const *a, void const *b)
.TP
.I uvec_find
find the first or last element that matches the string
.I str
depending on the sort type
and returns the element number.
If the string is not found then returns -1.  A value less than -1
indicates an error, which probably can be ignored.
type = uvec sorting type.
.TP
.I uvec_uniq
remove all adjacent duplicate elements, where
type = uvec sorting type ... the important information is whether
to use a caseless comparison or not, but there may be subtle
side effects depending on whether the sort type is ascending or descending.
.TP
.I uvec_reverse
reverses the element order of the vector.
.TP
.I uvec_randomize
randomizes the vector, will be repeatable if
given the same random number seed.
If seed <=0 then will "randomly" choose one.
.TP
.I str2uvec
copies a string to a uvec, breaking the string at the given delimiter,
uses the default string functions for creating the new uvec.
.TP
.I vec2uvec
copies a vector (or part of a vector upto num elements) to a uvec,
uses the default string functions for creating the new uvec.
Set num to a value less than or equal to 0 to grab the entire vector.
.TP
.I uvec2uvec
copies a uvec to a uvec
uses the default string functions for creating the new uvec.
.TP
.I uvec2str
copies a uvec to a string with the elements separated by the
given delimeter,
uses the uvec object string functions for creating the string.
.TP
.I uvec_strfree
free up the string allocated by
.I uvec2str
using the string functions from the given uvec object (which should be
the same one used in
.IR uvec2str ).

.SH EXAMPLES

.nf
#define RKOERROR
#include <stdio.h>
#include "rkoerror.h"
#include "uvec.h"

int main() {
	uvec *u;
	int estat=0;
	char buffer[128];
	char **vec;
	int i;

	if(!(u = uvec_ctor(10))) rkoperror("main");

	for (i = 0; i < 12; ++i) {
		(void) sprintf(buffer, ":%0.2d:", i);
		if (uvec_add(u, buffer)) rkoperror("main");
	}
	/* can access the elements ``directly'' */
	*(uvec_vector(u)[0]) = 'x';
	*(uvec_vector(u)[5]) = 'x';

	if(uvec_pop(u)) rkoperror("main");
	if(uvec_pop(u)) rkoperror("main");

	vec = uvec_vector(u);
	if (uvec_exists(u)) {
		for (i = 0; *vec != (char *) NULL; ++i, ++vec) {
			printf("\t-%s-", *vec);
			if (!((i+1)%5)) printf("\\n");
		}
		printf("\\n");
		printf("\\tend = %d, number = %d, capacity = %d\n",
			uvec_end(u), uvec_number(u), uvec_capacity(u));
	}

	if(uvec_dtor(&u)) rkoperror("main");

	return 0;
}
.fi
.P
Should get the following results:
.nf
        -x00:-  -:01:-  -:02:-  -:03:-  -:04:-
        -x05:-  -:06:-  -:07:-  -:08:-  -:09:-

        end = 9, number = 10, capacity = 15
.fi

.SH SEE ALSO
environ(5),exec(2),strcasecmp(3),strmalloc(3rko),rkoerror(3rko),urand(3rko)

.SH NOTES

.SH DIAGNOSTICS
Uses the
.I rkoerror
mechanism, and should be self explanatory.

.SH BUGS
Only deletes one element at a time, because I found no
real need to do otherwise.  However, the sources are general enough
that it could easily handle more than one element if so desired.

.SH AUTHOR
R.K.Owen,Ph.D. 10/31/1997, updated 10/31/2001

.KEY WORDS
